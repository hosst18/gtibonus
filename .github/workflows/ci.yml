name: CI

on:
  push:
    branches: ["main"]
    tags-ignore: ["*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

# Évite les exécutions concurrentes sur la même ref
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# Permissions par défaut (release-it a besoin d'écrire les tags, GHCR a besoin d'écrire les packages)
permissions:
  contents: write
  packages: write

env:
  ENV_TARGET: ${{ vars.ENV_TARGET || '' }}

jobs:
  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      # Cache supplémentaire (utile si beaucoup de deps)
      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: npm-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci --cache .npm --prefer-offline

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: install
    if: "${{ github.event_name != 'push' || !startsWith(github.event.head_commit.message, 'chore: release') }}"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: npm-${{ hashFiles('package-lock.json') }}

      - name: Install deps
        run: npm ci --cache .npm --prefer-offline

      - name: Run ESLint
        run: npm run lint

  only_canary:
    name: Only Canary
    runs-on: ubuntu-latest
    needs: lint
    if: "${{ vars.ENV_TARGET == 'canary' }}"
    steps:
      - name: Hello Only Canary
        run: echo "Hello Only Canary !"

  unit_test:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: lint
    if: "${{ github.event_name != 'push' || !startsWith(github.event.head_commit.message, 'chore: release') }}"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: npm-${{ hashFiles('package-lock.json') }}

      - name: Install deps
        run: npm ci --cache .npm --prefer-offline

      - name: Run unit tests (Vitest)
        env:
          CI: true
        run: npm test

  integration_test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: unit_test
    if: "${{ github.event_name != 'push' || !startsWith(github.event.head_commit.message, 'chore: release') }}"
    steps:
      - name: Hello Integration
        run: echo "Hello Integration !"

  build_docker:
    name: Build & Push Docker (GHCR)
    runs-on: ubuntu-latest
    needs: integration_test
    if: "${{ github.event_name != 'push' || !startsWith(github.event.head_commit.message, 'chore: release') }}"
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # ⬇️ Optionnel : rendre le package GHCR public automatiquement (nécessite un PAT dans GH_TOKEN)
      - name: Make GHCR package public (idempotent)
        if: ${{ github.ref == 'refs/heads/main' && secrets.GH_TOKEN != '' }}
        env:
          OWNER: ${{ github.repository_owner }}
          REPO:  ${{ github.event.repository.name }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          set -e
          PKG_NAME="$(echo "$REPO" | tr '[:upper:]' '[:lower:]')"
          echo "Setting visibility to public for container package: ${PKG_NAME}"
          curl -sSf -X PATCH \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/user/packages/container/${PKG_NAME}/visibility \
            -d '{"visibility":"public"}' || echo "Already public or first push not indexed yet"

  e2e_test:
    name: E2E Test (PRs only)
    runs-on: ubuntu-latest
    needs: integration_test
    if: "${{ github.event_name == 'pull_request' }}"
    steps:
      - name: Hello E2E
        run: echo "Hello E2E !"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build_docker]
    if: "${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main' && !startsWith(github.event.head_commit.message, 'chore: release')) }}"
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - uses: actions/cache@v4
        with:
          path: |
            node_modules
            .npm
          key: npm-${{ hashFiles('package-lock.json') }}

      - name: Configure Git identity
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

      - name: Install deps
        run: npm ci --cache .npm --prefer-offline

      - name: Release with release-it
        env:
          # Utilise le token intégré (évite d'avoir un PAT)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx --yes release-it --ci
